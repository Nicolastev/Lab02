import java.util.Arrays;
import java.util.Random;

public class SortComparison {
    
    public static void bubbleSort(double[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    double temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }
    public static void insertionSort(double[] arr) {
        int n = arr.length;
        for (int i = 1; i < n; i++) {
            double key = arr[i];
            int j = i - 1;
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = key;
        }
    }

    public static void selectionSort(double[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < n; j++) {
                if (arr[j] < arr[minIndex]) {
                    minIndex = j;
                }
            }
            double temp = arr[minIndex];
            arr[minIndex] = arr[i];
            arr[i] = temp;
        }
    }

    public static void mergeSort(double[] arr, int left, int right) {
        if (left < right) {
            int middle = (left + right) / 2;

            mergeSort(arr, left, middle);
            mergeSort(arr, middle + 1, right);

            merge(arr, left, middle, right);
        }
    }

    public static void merge(double[] arr, int left, int middle, int right) {
        int n1 = middle - left + 1;
        int n2 = right - middle;

        double[] L = new double[n1];
        double[] R = new double[n2];

        for (int i = 0; i < n1; ++i)
            L[i] = arr[left + i];
        for (int j = 0; j < n2; ++j)
            R[j] = arr[middle + 1 + j];

        int i = 0, j = 0;
        int k = left;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }
        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }
    public static double[] generateRandomArray(int size) {
        Random random = new Random();
        double[] arr = new double[size];
        for (int i = 0; i < size; i++) {
            arr[i] = random.nextDouble();
        }
        return arr;
    }

    public static void main(String[] args) {
        int[] sizes = {100, 500, 1000, 5000, 10000};

        System.out.printf("%-10s %-15s %-15s %-15s %-15s\n", "Size", "Bubble Sort", "Insertion Sort", "Selection Sort", "Merge Sort");

        for (int size : sizes) {
            double[] array = generateRandomArray(size);

            double[] arrBubble = Arrays.copyOf(array, array.length);
            long startTime = System.nanoTime();
            bubbleSort(arrBubble);
            long endTime = System.nanoTime();
            long bubbleTime = (endTime - startTime) / 1000000; // Convertir a milisegundos

            double[] arrInsertion = Arrays.copyOf(array, array.length);
            startTime = System.nanoTime();
            insertionSort(arrInsertion);
            endTime = System.nanoTime();
            long insertionTime = (endTime - startTime) / 1000000;

            double[] arrSelection = Arrays.copyOf(array, array.length);
            startTime = System.nanoTime();
            selectionSort(arrSelection);
            endTime = System.nanoTime();
            long selectionTime = (endTime - startTime) / 1000000;

            double[] arrMerge = Arrays.copyOf(array, array.length);
            startTime = System.nanoTime();
            mergeSort(arrMerge, 0, arrMerge.length - 1);
            endTime = System.nanoTime();
            long mergeTime = (endTime - startTime) / 1000000;

            System.out.printf("%-10d %-15d %-15d %-15d %-15d\n", size, bubbleTime, insertionTime, selectionTime, mergeTime);
        }
    }
}
